//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.34209
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MathClientWpf.MathService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tuple", Namespace="http://schemas.datacontract.org/2004/07/MathService")]
    [System.SerializableAttribute()]
    public partial class Tuple : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MathService.IMath")]
    public interface IMath {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/Prime", ReplyAction="http://tempuri.org/IMath/PrimeResponse")]
        bool Prime(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/Prime", ReplyAction="http://tempuri.org/IMath/PrimeResponse")]
        System.Threading.Tasks.Task<bool> PrimeAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/Sum", ReplyAction="http://tempuri.org/IMath/SumResponse")]
        MathClientWpf.MathService.Tuple Sum(MathClientWpf.MathService.Tuple t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/Sum", ReplyAction="http://tempuri.org/IMath/SumResponse")]
        System.Threading.Tasks.Task<MathClientWpf.MathService.Tuple> SumAsync(MathClientWpf.MathService.Tuple t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/SolveSystem", ReplyAction="http://tempuri.org/IMath/SolveSystemResponse")]
        double[] SolveSystem(double[] system);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/SolveSystem", ReplyAction="http://tempuri.org/IMath/SolveSystemResponse")]
        System.Threading.Tasks.Task<double[]> SolveSystemAsync(double[] system);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMathChannel : MathClientWpf.MathService.IMath, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MathClient : System.ServiceModel.ClientBase<MathClientWpf.MathService.IMath>, MathClientWpf.MathService.IMath {
        
        public MathClient() {
        }
        
        public MathClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MathClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MathClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MathClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Prime(int value) {
            return base.Channel.Prime(value);
        }
        
        public System.Threading.Tasks.Task<bool> PrimeAsync(int value) {
            return base.Channel.PrimeAsync(value);
        }
        
        public MathClientWpf.MathService.Tuple Sum(MathClientWpf.MathService.Tuple t) {
            return base.Channel.Sum(t);
        }
        
        public System.Threading.Tasks.Task<MathClientWpf.MathService.Tuple> SumAsync(MathClientWpf.MathService.Tuple t) {
            return base.Channel.SumAsync(t);
        }
        
        public double[] SolveSystem(double[] system) {
            return base.Channel.SolveSystem(system);
        }
        
        public System.Threading.Tasks.Task<double[]> SolveSystemAsync(double[] system) {
            return base.Channel.SolveSystemAsync(system);
        }
    }
}
